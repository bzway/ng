// package main

// import (
// 	"flag"
// 	"fmt"
// 	"io"
// 	"log"
// 	"net/http"
// 	"os"
// 	"path"
// 	"runtime"
// 	"strconv"
// )

// func sayHello(w http.ResponseWriter, r *http.Request) {
// 	fmt.Fprintln(w, "Hello: %v; ", "Test")
// 	fmt.Fprintf(w, "Hello, %q", r.URL.Path)
// }

// func GetWorkRoot() string {
// 	var root = "./"
// 	_, filename, _, ok := runtime.Caller(1)
// 	fmt.Println(path.Dir(filename))
// 	if ok {
// 		root = path.Join(path.Dir(filename), "") // the the main function file directory
// 	}
// 	return root
// }
// func main() {
// 	port := *flag.Int("p", 5555, "Set The Http Port")
// 	root := GetWorkRoot()
// 	flag.Parse()

// 	pwd, _ := os.Getwd()
// 	log.Printf("Listens On http://localhost:%d", port)
// 	log.Printf("Current Work Directory: %s", pwd)
// 	log.Printf("Current Root Directory: %s", root)
// 	var dicts = map[string]string{"key": "abc", "key2": "efg"}
// 	fmt.Println(dicts)

// 	http.HandleFunc("/upload", uploadHandler)
// 	http.HandleFunc("/hello", sayHello)
// 	http.HandleFunc("/bar", func(w http.ResponseWriter, r *http.Request) {
// 		fmt.Fprintf(w, "Hello, %q", r.URL.Path)
// 	})
// 	//static file handler.
// 	http.Handle("/", http.StripPrefix("/", http.FileServer(http.Dir(root))))
// 	Open("http://localhost:" + strconv.Itoa(port))
// 	err := http.ListenAndServe(":"+strconv.Itoa(port), nil)
// 	if err != nil {
// 		log.Fatal("Listen And Server Error: ", err)
// 	}
// }

// func uploadHandler(w http.ResponseWriter, r *http.Request) {
// 	switch r.Method {
// 	//POST takes the uploaded file(s) and saves it to disk.
// 	case "POST":
// 		//parse the multipart form in the request
// 		err := r.ParseMultipartForm(100000)
// 		if err != nil {
// 			http.Error(w, err.Error(), http.StatusInternalServerError)
// 			return
// 		}

// 		//get a ref to the parsed multipart form
// 		m := r.MultipartForm
// 		var path string
// 		dir := r.Form["dir"]
// 		if len(dir) > 0 && dir[0] != "" {
// 			path = DEFAULTROOT + "/" + dir[0]
// 			exist := PathExists(path)
// 			if !exist {
// 				log.Printf("Make new directory: %s", path)
// 				err = os.MkdirAll(path, os.ModePerm)
// 			}
// 		} else {
// 			path = DEFAULTROOT
// 		}

// 		for k, files := range m.File {
// 			log.Printf("Key: %s Count: %d\n", k, len(files))
// 			for i, _ := range files {
// 				//for each fileheader, get a handle to the actual file
// 				file, err := files[i].Open()
// 				defer file.Close()
// 				if err != nil {
// 					http.Error(w, err.Error(), http.StatusInternalServerError)
// 					return
// 				}
// 				//create destination file making sure the path is writeable.
// 				dst, err := os.Create(path + "/" + files[i].Filename)
// 				defer dst.Close()
// 				if err != nil {
// 					http.Error(w, err.Error(), http.StatusInternalServerError)
// 					return
// 				}
// 				//copy the uploaded file to the destination file
// 				if _, err := io.Copy(dst, file); err != nil {
// 					http.Error(w, err.Error(), http.StatusInternalServerError)
// 					return
// 				}

// 			}
// 		}
// 	default:
// 		w.WriteHeader(http.StatusMethodNotAllowed)
// 	}
// }
// func PathExists(path string) bool {
// 	_, err := os.Stat(path)
// 	if err == nil {
// 		return true
// 	}
// 	if os.IsNotExist(err) {
// 		return false
// 	}
// 	return false
// }
